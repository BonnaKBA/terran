import re
import os
import disnake
from dotenv import load_dotenv
from disnake.ext import commands
from disnake.ui import Button, View
from disnake import MessageInteraction

load_dotenv()

TOKEN = os.getenv("DISCORD_TOKEN")
ALLOWED_ROLES = int(os.getenv("ALLOWED_ROLES"))
LOG_CHANNEL_ID = int(os.getenv("LOG_CHANNEL_ID"))

intents = disnake.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix="!", intents=intents)

user_choices = {}
vote_message_ids = {}
locked_users = set()
vote_choices = {}
locked_users = set()

async def yes_callback(interaction):
    if interaction.user.id in locked_users:
        await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –º–µ–Ω—è—Ç—å –≤—ã–±–æ—Ä, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", ephemeral=True)
        return
    
    vote_id = interaction.message.id
    reason = interaction.message.content.split("\n")[0]
    reason = reason.replace("@everyone", "").strip()

    if vote_id not in vote_choices:
        vote_choices[vote_id] = {}
    
    old_choice = vote_choices[vote_id].get(interaction.user.id, None)
    vote_choices[vote_id][interaction.user.id] = '‚úÖ'
    
    log_channel = bot.get_channel(LOG_CHANNEL_ID)
    
    if old_choice != '‚úÖ':
        if log_channel:
            if old_choice is None:
                await log_channel.send(f"–°–±–æ—Ä {reason}: @{interaction.user.mention} —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä ‚úÖ.")
            else:
                await log_channel.send(f"–°–±–æ—Ä {reason}: @{interaction.user.mention} –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ–π –≤—ã–±–æ—Ä —Å {old_choice} –Ω–∞ ‚úÖ.")
    
    embed = interaction.message.embeds[0]
    await update_vote_message(embed, interaction.message, old_choice=old_choice, new_choice='‚úÖ', ctx=interaction, reason=reason)
    await interaction.response.defer()

async def no_callback(interaction):
    if interaction.user.id in locked_users:
        await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –º–µ–Ω—è—Ç—å –≤—ã–±–æ—Ä, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", ephemeral=True)
        return
    
    vote_id = interaction.message.id
    reason = interaction.message.content.split("\n")[0]
    reason = reason.replace("@everyone", "").strip()
    
    if vote_id not in vote_choices:
        vote_choices[vote_id] = {}
    
    old_choice = vote_choices[vote_id].get(interaction.user.id, None)
    vote_choices[vote_id][interaction.user.id] = '‚ùå'
    
    log_channel = bot.get_channel(LOG_CHANNEL_ID)

    if old_choice != '‚ùå':
        if log_channel:
            if old_choice is None:
                await log_channel.send(f"–°–±–æ—Ä {reason}: @{interaction.user.mention} —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä ‚ùå.")
            else:
                await log_channel.send(f"–°–±–æ—Ä {reason}: @{interaction.user.mention} –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ–π –≤—ã–±–æ—Ä —Å {old_choice} –Ω–∞ ‚ùå.")
    
    embed = interaction.message.embeds[0]
    await update_vote_message(embed, interaction.message, old_choice=old_choice, new_choice='‚ùå', ctx=interaction, reason=reason)
    await interaction.response.defer()

async def close_callback(interaction):
    member = interaction.guild.get_member(interaction.user.id)
    log_channel = bot.get_channel(LOG_CHANNEL_ID)

    if any(role.id in ALLOWED_ROLES for role in member.roles):
        vote_id = interaction.message.id
        if vote_id in vote_choices and vote_choices[vote_id]:
            participants_list = "\n".join(
                [f"{i + 1}. {bot.get_user(user_id).mention}: {choice}" for i, (user_id, choice) in enumerate(vote_choices[vote_id].items())]
            )
        else:
            participants_list = "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
        embed = disnake.Embed(
            title="–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ",
            description=f"**–£—á–∞—Å—Ç–Ω–∏–∫–∏:**\n{participants_list}",
            color=disnake.Color.red()
        )
        embed.set_footer(text=f"–ó–∞–∫—Ä—ã—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {interaction.user.display_name}")
        
        if log_channel:
            await log_channel.send(f"{interaction.user.mention} –∑–∞–∫—Ä—ã–ª —Å–±–æ—Ä, –≤ –∫–æ—Ç–æ—Ä–æ–º —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏:", embed=embed)
        await interaction.message.delete()
        await interaction.response.send_message("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.", ephemeral=True)
    else:
        await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.", ephemeral=True)

async def edit_callback(interaction):
    member = interaction.guild.get_member(interaction.user.id)
    if any(role.id in ALLOWED_ROLES for role in member.roles):
        await interaction.response.send_message(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –Ω–æ–≤—ã–π –≤—ã–±–æ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ `!edit <–Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞> <–Ω–æ–≤—ã–π –≤—ã–±–æ—Ä (‚úÖ/‚ùå –∏–ª–∏ 1/2)>.`", ephemeral=True
        )
    else:
        await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤.", ephemeral=True)

@bot.command(name="vote")
async def vote(ctx, *, reason: str = None):
    if reason is None:
        await ctx.send("–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É —Å–±–æ—Ä–∞. `–ü—Ä–∏–º–µ—Ä: !vote <–ø—Ä–∏—á–∏–Ω–∞>.`", delete_after=10)
        await ctx.message.delete()
        return
    await ctx.message.delete()

    log_channel = bot.get_channel(LOG_CHANNEL_ID)
    if log_channel:
        await log_channel.send(f"{ctx.author.mention} –Ω–∞—á–∞–ª —Å–±–æ—Ä: {reason}")

    embed = disnake.Embed(
        description="**–£—á–∞—Å—Ç–Ω–∏–∫–∏:**\n",
        color=disnake.Color.blurple()
    )

    mention_message = f"{ctx.author.mention} –Ω–∞—á–∞–ª —Å–±–æ—Ä."

    yes_button = Button(label="–û—Ç–º–µ—Ç–∏—Ç—å—Å—è ‚úÖ", style=disnake.ButtonStyle.success)
    no_button = Button(label="–ü–æ–∫–∏–Ω—É—Ç—å ‚ùå", style=disnake.ButtonStyle.danger)
    close_button = Button(label="–ó–∞–∫—Ä—ã—Ç—å üõë", style=disnake.ButtonStyle.secondary)
    edit_button = Button(label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚úèÔ∏è", style=disnake.ButtonStyle.secondary)

    yes_button.callback = yes_callback
    no_button.callback = no_callback
    close_button.callback = close_callback
    edit_button.callback = edit_callback

    message = await ctx.send(content=f"# {reason} @everyone\n{mention_message}", embed=embed, view=create_vote_view(yes_button, no_button, close_button, edit_button))

    vote_message_ids[ctx.guild.id] = message.id

def create_vote_view(yes_button, no_button, close_button, edit_button):
    view = View()
    view.add_item(yes_button)
    view.add_item(no_button)
    view.add_item(close_button)
    view.add_item(edit_button)
    return view

async def update_vote_message(embed, message, ctx=None, is_admin_edit=False, old_choice=None, new_choice=None, reason=None):
    vote_id = message.id
    log_channel = bot.get_channel(LOG_CHANNEL_ID)

    if vote_id not in vote_choices:
        vote_choices[vote_id] = {}

    user_id = ctx.user.id if ctx else None

    if user_id:
        old_choice = vote_choices[vote_id].get(user_id, None)
        if old_choice != new_choice:
            vote_choices[vote_id][user_id] = new_choice
        participants_list = []
        user_number_map = {}
        for i, (user_id, choice) in enumerate(vote_choices[vote_id].items()):
            participant = bot.get_user(user_id)
            if participant:
                participants_list.append(f"{i + 1}. {participant.mention}: {choice}")
                user_number_map[i + 1] = user_id
        participants_str = "\n".join(participants_list) if participants_list else "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        if len(embed.fields) > 0:
            embed.set_field_at(0, name="–£—á–∞—Å—Ç–Ω–∏–∫–∏", value=participants_str)
        else:
            embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–∏", value=participants_str)
        await message.edit(embed=embed)

        if ctx:
            if old_choice is None:
                if log_channel:
                    await log_channel.send(f"–°–±–æ—Ä {reason}: @{ctx.author.mention} —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä {new_choice}.")

            elif old_choice != new_choice:
                if log_channel:
                    await log_channel.send(f"–°–±–æ—Ä {reason}: @{ctx.author.mention} –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ–π –≤—ã–±–æ—Ä —Å {old_choice} –Ω–∞ {new_choice}.")

        return user_number_map

    if is_admin_edit:
        locked_users.add(ctx.author.id)
        for button in message.components[0].children:
            if button.label == '–û—Ç–º–µ—Ç–∏—Ç—å—Å—è ‚úÖ' or button.label == '–ü–æ–∫–∏–Ω—É—Ç—å ‚ùå':
                button.disabled = True
        await message.edit(view=create_vote_view(*message.components[0].children))

@bot.command(name="edit")
async def edit(ctx, number: int = None, new_choice: str = None):
    await ctx.message.delete()

    if number is None or new_choice is None:
        await ctx.send("–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –Ω–æ–≤—ã–π –≤—ã–±–æ—Ä. –ü—Ä–∏–º–µ—Ä: `!edit <–Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞> <–Ω–æ–≤—ã–π –≤—ã–±–æ—Ä (‚úÖ/‚ùå –∏–ª–∏ 1/2)>`", delete_after=10)
        return

    if new_choice == '1':
        new_choice = '‚úÖ'
    elif new_choice == '2':
        new_choice = '‚ùå'
    if new_choice not in ['‚úÖ', '‚ùå']:
        await ctx.send("–û—à–∏–±–∫–∞: –Ω–æ–≤—ã–π –≤—ã–±–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ‚úÖ –∏–ª–∏ ‚ùå (–∏–ª–∏ 1 –¥–ª—è ‚úÖ –∏ 2 –¥–ª—è ‚ùå).", delete_after=10)
        return

    member = ctx.guild.get_member(ctx.author.id)
    if not any(role.id in ALLOWED_ROLES for role in member.roles):
        await ctx.send("–û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–æ–≤.", delete_after=10)
        return

    if ctx.guild.id not in vote_message_ids:
        await ctx.send("–û—à–∏–±–∫–∞: ID —Å–æ–æ–±—â–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", delete_after=10)
        return

    message_id = vote_message_ids[ctx.guild.id]
    channel = ctx.channel

    try:
        message = await channel.fetch_message(message_id)
        embed = message.embeds[0]
    except disnake.NotFound:
        await ctx.send("–û—à–∏–±–∫–∞: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", delete_after=10)
        return

    vote_id = message.id
    if vote_id not in vote_choices:
        await ctx.send("–û—à–∏–±–∫–∞: –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å.", delete_after=10)
        return

    participants = list(vote_choices[vote_id].items())
    if number < 1 or number > len(participants):
        await ctx.send("–û—à–∏–±–∫–∞: –£—á–∞—Å—Ç–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.", delete_after=10)
        return

    user_id, old_choice = participants[number - 1]

    if old_choice == new_choice:
        await ctx.send("–û—à–∏–±–∫–∞: –ù–æ–≤—ã–π –≤—ã–±–æ—Ä —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.", delete_after=10)
        return

    vote_choices[vote_id][user_id] = new_choice

    edited_member = ctx.guild.get_member(user_id)

    if not any(role.id in ALLOWED_ROLES for role in edited_member.roles):
        locked_users.add(user_id)
    participants_list = [
        f"{i + 1}. {bot.get_user(uid).mention}: {choice}" for i, (uid, choice) in enumerate(vote_choices[vote_id].items())
    ]
    participants_str = "\n".join(participants_list) if participants_list else "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"

    if len(embed.fields) > 0:
        embed.set_field_at(0, name="–£—á–∞—Å—Ç–Ω–∏–∫–∏", value=participants_str)
    else:
        embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–∏", value=participants_str)
    await message.edit(embed=embed)

    log_channel = bot.get_channel(LOG_CHANNEL_ID)
    if log_channel:
        await log_channel.send(
            f"{ctx.author.mention} –∏–∑–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä {edited_member.mention} —Å {old_choice} –Ω–∞ {new_choice}."
        )

class VotingView(View):
    def __init__(self, vote_id):
        super().__init__()
        self.vote_id = vote_id

    @disnake.ui.button(label="–û—Ç–º–µ—Ç–∏—Ç—å—Å—è ‚úÖ", style=disnake.ButtonStyle.green)
    async def confirm(self, button: Button, interaction: MessageInteraction):
        user_id = interaction.user.id

        if user_id in locked_users:
            await interaction.response.send_message(
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –º–µ–Ω—è—Ç—å –≤—ã–±–æ—Ä, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", ephemeral=True
            )
            return

        if self.vote_id not in vote_choices:
            await interaction.response.send_message(
                "–û—à–∏–±–∫–∞: –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å.", ephemeral=True
            )
            return

        vote_choices[self.vote_id][user_id] = "‚úÖ"
        await update_vote_embed(interaction.message)

    @disnake.ui.button(label="–ü–æ–∫–∏–Ω—É—Ç—å ‚ùå", style=disnake.ButtonStyle.red)
    async def leave(self, button: Button, interaction: MessageInteraction):
        user_id = interaction.user.id

        if user_id in locked_users:
            await interaction.response.send_message(
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –º–µ–Ω—è—Ç—å –≤—ã–±–æ—Ä, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", ephemeral=True
            )
            return

        if self.vote_id not in vote_choices:
            await interaction.response.send_message(
                "–û—à–∏–±–∫–∞: –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å.", ephemeral=True
            )
            return

        vote_choices[self.vote_id].pop(user_id, None)
        await update_vote_embed(interaction.message)


async def update_vote_embed(message):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç embed —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
    """
    vote_id = message.id
    if vote_id not in vote_choices:
        return

    embed = message.embeds[0]
    participants_list = [
        f"{i + 1}. {bot.get_user(uid).mention}: {choice}" for i, (uid, choice) in enumerate(vote_choices[vote_id].items())
    ]
    participants_str = "\n".join(participants_list) if participants_list else "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"

    if len(embed.fields) > 0:
        embed.set_field_at(0, name="–£—á–∞—Å—Ç–Ω–∏–∫–∏", value=participants_str)
    else:
        embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–∏", value=participants_str)
    await message.edit(embed=embed)


@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        await ctx.send(f"–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !vote –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.", delete_after=10)
    else:
        raise error

bot.run(TOKEN)