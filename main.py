import re
import os
import discord
import asyncio
from discord.ext import commands
from dotenv import load_dotenv
from collections import defaultdict
import logging

load_dotenv()

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(levelname)s %(message)s')

TOKEN = os.getenv("DISCORD_TOKEN")
GUILD_ID = int(os.getenv("GUILD_ID"))
WATCHED_CHANNEL_ID = int(os.getenv("WATCHED_CHANNEL_ID"))

intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)

CHECK_INTERVAL = 60
KICK_TIME = 3600

partial_embeds = defaultdict(list)  # user_id -> list of embeds


@bot.event
async def on_ready():
    logging.info("on_ready –≤—ã–∑–≤–∞–Ω")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", flush=True)
    logging.info(f"–¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è: {bot.user}")
    activity = discord.Activity(type=discord.ActivityType.watching, name="@bonnaKBA")
    bot.loop.create_task(check_members())
    await bot.change_presence(status=discord.Status.online, activity=activity)


async def check_members():
    await bot.wait_until_ready()
    guild = bot.get_guild(GUILD_ID)
    if not guild:
        print("Guild not found!")
        return

    while not bot.is_closed():
        for member in guild.members:
            if len(member.roles) == 1:
                join_duration = (discord.utils.utcnow() - member.joined_at).total_seconds()
                if join_duration >= KICK_TIME:
                    try:
                        await member.kick(reason="–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–µ–π")
                        print(f'–ö–∏–∫–Ω—É—Ç {member.name} –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–µ–π')
                    except Exception as e:
                        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ {member.name}: {e}')
        await asyncio.sleep(CHECK_INTERVAL)

@bot.command()
@commands.has_permissions(kick_members=True)
async def kick(ctx):
    logging.info("–ö–æ–º–∞–Ω–¥–∞ kick –≤—ã–∑–≤–∞–Ω–∞")
    guild = ctx.guild
    kicked_count = 0

    await ctx.send("–ù–∞—á–∏–Ω–∞—é –∫–∏–∫–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–µ–π...")

    for member in guild.members:
        logging.debug(f"–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.name}, —Ä–æ–ª–∏: {len(member.roles)}")
        if len(member.roles) == 1:
            try:
                await member.kick(reason="–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–µ–π")
                kicked_count += 1
                logging.info(f'–ö–∏–∫–Ω—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.name} –±–µ–∑ —Ä–æ–ª–µ–π.')
            except discord.Forbidden:
                logging.warning(f'–ù–µ —É–¥–∞–ª–æ—Å—å –∫–∏–∫–Ω—É—Ç—å {member.name}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.')
            except Exception as e:
                logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ {member.name}: {e}')

    await ctx.send(f'–ö–∏–∫–Ω—É—Ç–æ {kicked_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–µ–π.' if kicked_count > 0 else "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–∏–∫–∞.")

def extract_id_from_mention(mention: str):
    match = re.match(r'<#(\d+)>', mention)
    if match:
        return int(match.group(1))
    return None

async def process_embeds_for_user(user_id, embeds):
    second_embed = None
    decision_embed = None

    for embed in embeds:
        for field in embed.fields:
            if "–ö–∞–Ω–∞–ª" in field.name:
                second_embed = embed
            if "–ü—Ä–∏–Ω—è–ª" in field.name or "–û—Ç–∫–ª–æ–Ω–∏–ª" in field.name:
                decision_embed = embed

    if not second_embed or not decision_embed:
        logging.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ —ç–º–±–µ–¥—ã")
        return

    target_channel_id = None
    decision = None
    decision_made_by = None

    logging.debug("üì• –ü–∞—Ä—Å–∏–º –≤—Ç–æ—Ä–æ–π embed")
    for field in second_embed.fields:
        logging.debug(f"–ü–æ–ª–µ: {field.name} = {field.value}")
        if "–ö–∞–Ω–∞–ª" in field.name:
            match = re.search(r"<#(\d+)>", field.value)
            if match:
                target_channel_id = int(match.group(1))
                logging.debug(f"‚úÖ –ò–∑–≤–ª–µ—á—ë–Ω channel_id: {target_channel_id}")

    logging.debug("üì• –ü–∞—Ä—Å–∏–º embed —Å —Ä–µ—à–µ–Ω–∏–µ–º")
    for field in decision_embed.fields:
        logging.debug(f"–ü–æ–ª–µ: {field.name} = {field.value}")
        if "–ü—Ä–∏–Ω—è–ª" in field.name:
            decision = "accepted"
        elif "–û—Ç–∫–ª–æ–Ω–∏–ª" in field.name:
            decision = "denied"
        match = re.search(r"<@!?(\d+)>", field.value)
        if match:
            decision_made_by = int(match.group(1))
            logging.debug(f"‚úÖ –ò–∑–≤–ª–µ—á—ë–Ω decision_made_by: {decision_made_by}")

    logging.debug(f"–ò—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: user_id={user_id}, channel_id={target_channel_id}, decision={decision}, decision_by={decision_made_by}")

    if not all([user_id, target_channel_id, decision]):
        logging.warning("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è")
        return

    guild = bot.get_guild(GUILD_ID)
    if not guild:
        logging.error("‚ùå Guild –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    member = guild.get_member(user_id)
    if not member:
        logging.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    target_channel = guild.get_channel(target_channel_id)
    if not target_channel:
        logging.error(f"‚ùå –ö–∞–Ω–∞–ª —Å ID {target_channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    try:
        await target_channel.set_permissions(member, overwrite=None)
        logging.info(f"‚úÖ –°–Ω—è—Ç—ã –ø–µ—Ä–º–∏—à–µ–Ω—ã —É {member.name} –≤ #{target_channel.name}, —Ä–µ—à–µ–Ω–∏–µ: {decision}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–∞–≤: {e}")

@bot.event
async def on_message(message):
    if message.channel.id != WATCHED_CHANNEL_ID:
        return

    logging.debug(f"on_message –≤—ã–∑–≤–∞–Ω: –∫–∞–Ω–∞–ª={message.channel.id}, –∞–≤—Ç–æ—Ä={message.author}, embeds={len(message.embeds)}")

    await bot.process_commands(message)

    if not message.embeds:
        return

    embed = message.embeds[0]

    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ embed (–ø–æ–ª–µ "–ö–æ–≥–æ" –∏–ª–∏ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    user_id = None
    for field in embed.fields:
        if "–ö–æ–≥–æ" in field.name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" in field.name:
            match = re.search(r"<@!?(\d+)>", field.value)
            if match:
                user_id = int(match.group(1))
                logging.debug(f"‚úÖ –ò–∑–≤–ª–µ—á—ë–Ω user_id: {user_id}")
                break

    if not user_id:
        logging.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å user_id –∏–∑ embed")
        return

    partial_embeds[user_id].append(embed)
    logging.debug(f"üì• –î–æ–±–∞–≤–ª–µ–Ω embed –¥–ª—è user_id={user_id}, –≤—Å–µ–≥–æ {len(partial_embeds[user_id])} embeds")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ embed —Å —Ä–µ—à–µ–Ω–∏–µ–º (–ü—Ä–∏–Ω—è–ª –∏–ª–∏ –û—Ç–∫–ª–æ–Ω–∏–ª)
    decision_present = any(
        any("–ü—Ä–∏–Ω—è–ª" in field.name or "–û—Ç–∫–ª–æ–Ω–∏–ª" in field.name for field in e.fields)
        for e in partial_embeds[user_id]
    )

    if decision_present:
        embeds_to_process = partial_embeds.pop(user_id)
        await process_embeds_for_user(user_id, embeds_to_process)

print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...", flush=True)
try:
    bot.run(TOKEN)
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", flush=True)